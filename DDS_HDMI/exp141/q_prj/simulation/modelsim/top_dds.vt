// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "02/14/2022 13:48:24"
                                                                                
// Verilog Test Bench template for design : top_dds
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module top_dds_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [1:0] key;
reg key_add;
reg key_sub;
reg sys_clk;
reg sys_rst_n;
// wires                                               
wire dac_clk;
wire [7:0]  dac_data;
wire ddc_scl;
wire ddc_sda;
wire tmds_clk_n;
wire tmds_clk_p;
wire [2:0]  tmds_data_n;
wire [2:0]  tmds_data_p;

// assign statements (if any)                          
top_dds i1 (
// port map - connection between master ports and signals/registers   
	.dac_clk(dac_clk),
	.dac_data(dac_data),
	.ddc_scl(ddc_scl),
	.ddc_sda(ddc_sda),
	.key(key),
	.key_add(key_add),
	.key_sub(key_sub),
	.sys_clk(sys_clk),
	.sys_rst_n(sys_rst_n),
	.tmds_clk_n(tmds_clk_n),
	.tmds_clk_p(tmds_clk_p),
	.tmds_data_n(tmds_data_n),
	.tmds_data_p(tmds_data_p)
);
initial                                                
begin
        sys_clk     =  1'b0;
        sys_rst_n   <=  1'b0;
        FREQ_CTRL   <= 32'd42949;//500
        wave_select <=  2'b11;
        #200;
        sys_rst_n   <=   1'b1;
        #10000
        wave_select <=  2'b11;
        #8000000;
        wave_select <=  2'b10;
        #8000000;
        wave_select <=  2'b01;
        #8000000;
        wave_select <=  2'b00;
        #8000000;
        wave_select <=  2'b11;
        #8000000;
    end
always #10 sys_clk = ~sys_clk;                                                    
endmodule

