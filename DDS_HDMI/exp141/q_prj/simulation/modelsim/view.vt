// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "02/12/2022 19:15:03"
                                                                                
// Verilog Test Bench template for design : view
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module view_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [1:0] key;
reg key_add;
reg key_sub;
reg sys_clk;
reg sys_rst_n;
// wires                                               
wire dac_clk;
wire [7:0]  dac_data;
wire saw_wave_lab;
wire [7:0]  seg_led;
wire [5:0]  seg_sel;
wire sin_wave_lab;
wire squ_wave_lab;
wire tri_wave_lab;

// assign statements (if any)                          
view i1 (
// port map - connection between master ports and signals/registers   
	.dac_clk(dac_clk),
	.dac_data(dac_data),
	.key(key),
	.key_add(key_add),
	.key_sub(key_sub),
	.saw_wave_lab(saw_wave_lab),
	.seg_led(seg_led),
	.seg_sel(seg_sel),
	.sin_wave_lab(sin_wave_lab),
	.squ_wave_lab(squ_wave_lab),
	.sys_clk(sys_clk),
	.sys_rst_n(sys_rst_n),
	.tri_wave_lab(tri_wave_lab)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

